.=torg + 1000
main:	movb #0, #max_score
		br assign
assign: inc r5  ;			r5 - num of current word we are checking
		inc r3 ;			r3 - num of current prefixes we are checking
		mov #0, r0 ;		r0 - num of match words for the current prefix
		mov dict, r1; 		the dict pointer
		mov strings, r2;	the strings pointer
		mov r2, max_string;in case every case equal 0
		br check_if_match

;this function is the skeleton of the program
check_if_match:		  br check_exactly ; 	move the word & string letters to where they dont match
second_check:		  inc r1  ; 			drop off a mismatched letter from the word
scnd_check_loop:	  cmpb (r2), #'@ ; 		checks if the prefix is a match
					  beq success_check_exactly ;	in case of match
					  cmpb (r1), #'@ ; 		checks if the word ended before the prefix
					  beq reset_loop_1		;handle case of "ended" word
					  cmpb (r1), (r2)		; checks if word and string are matching in some letter
					  bne reset_loop_1		; return the pointers to the last place they were matching
					  inc r1				; move word pointer forward
					  inc r2				; move string pointer forward
					  inc r4				; keep tracks of the number we moved them
					  br scnd_check_loop	; checks next couple of words

reset_loop_1:	cmp r4, #0
				beq third_check
				dec r1
				dec r2
				dec r4
				cmp r4, #0
				bne reset_loop_1
third_check:	      dec r1
					  inc r2
thrd_check_loop:	  cmpb (r2), #'@
					  beq success_check_exactly
					  cmpb (r1), #'@
					  beq rst_loop_2
					  cmpb (r1), (r2)
					  bne rst_loop_2
					  inc r1
					  inc r2
					  inc r4
					  br thrd_check_loop

rst_loop_2:		cmp r4, #0
				beq fourth_check
				dec r1
				dec r2
				dec r4
				cmp r4, #0
				bne rst_loop_2	
fourth_check:		  inc r1
frth_check_loop:	  cmpb (r2), #'@
					  beq success_check_exactly
					  cmpb (r1), #'@
					  beq failed_check
					  cmpb (r1), (r2)
					  bne failed_check
					  inc r1
					  inc r2
					  inc r4
					  br frth_check_loop				

;compare the word and the prefix and leave them where they don't match
check_exactly: cmpb (r2), #'@
			   beq success_check_exactly
			   cmpb (r1), #'@
			   beq end_word
			   cmpb (r1), (r2)
			   bne second_check
			   inc r1
			   inc r2
			   br check_exactly
end_word: 	cmpb +1(r2), #'@ ;handle the end of the comparison
			beq success_check_exactly
			br failed_check

success_check_exactly: inc r0
failed_check:		   mov #0, r4
					   cmp r5, dict_len
					   bne next_dict_word
					   cmpb r0, max_score
					   bhi replace_max
after_max:			   cmp r3, strings_len
					   blo next_prefix
					   halt
					   
;move r1 to point next dict word
next_dict_word: inc r1
				cmpb -1(r1), #'@
				bne next_dict_word
				inc r5
				cmpb -1(r2), #'@
				beq br_check_if_match
lp_rst_prefix:  cmp r3, #1
				beq first_prefix
				dec r2
				cmpb -1(r2), #'@  ; 
				bne lp_rst_prefix
				br check_if_match
first_prefix:	mov strings, r2
br_check_if_match:br check_if_match

store_string: mov strings, max_string
			  br after_max

replace_max: movb r0, max_score
			 cmp r3, #1
			 beq store_string
			 cmpb -1(r2), #'@
			 beq store
r_max_loop:	 dec r2
			 cmpb -1(r2), #'@
			 bne r_max_loop
store:		 mov r2, max_string
		     br after_max

next_prefix: cmp r3, strings_len
			 beq fin
nxt_prf_loop: inc r2
			  cmpb -1(r2), #'@
			  bne nxt_prf_loop
			  inc r3
			  mov #1, r5
			  mov dict, r1
			  mov #0, r0
			  br br_check_if_match
			  
fin: halt
