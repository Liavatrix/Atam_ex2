


main:	mov #0, #max_score
		br assign
assign: inc r5
		inc r3
		mov #0, r0
		mov dict, r1
		mov strings, r2
		br check_if_match

check_if_match:		  br check_exactly
second_check:		  inc r1
scnd_check_loop:	  cmpb (r2), #'@
					  beq success_check_exactly
					  cmpb (r1), #'@
					  beq br_end_word
					  cmpb (r1), (r2)
					  bne reset_loop_1
					  inc r1
					  inc r2
					  inc r4
					  br scnd_check_loop
		
reset_loop_1:	cmp r4, #0
				beq third_check
				dec r1
				dec r2
				dec r4
				cmp r4, #0
				bne reset_loop_1
third_check:	      dec r1
					  inc r2
thrd_check_loop:	  cmpb (r2), #'@
					  beq success_check_exactly
					  cmpb (r1), #'@
					  beq br_end_word
					  cmpb (r1), (r2)
					  bne rst_loop_2
					  inc r1
					  inc r2
					  inc r4
					  br thrd_check_loop
rst_loop_2:		cmp r4, #0
				beq fourth_check
				dec r1
				dec r2
				dec r4
				cmp r4, #0
				bne rst_loop_2	
fourth_check:		  inc r1
frth_check_loop:	  cmpb (r2), #'@
					  beq success_check_exactly
					  cmpb (r1), #'@
					  beq br_end_word
					  cmpb (r1), (r2)
					  bne failed_check
					  inc r1
					  inc r2
					  inc r4
					  br frth_check_loop				
br_end_word: br end_word

;compare the word and the prefix and leave them where they don't match
check_exactly: cmpb (r2), #'@
			   beq success_check_exactly
			   cmpb (r1), #'@
			   beq end_word
			   cmpb (r1), (r2)
			   bne second_check
			   inc r1
			   inc r2
			   br check_exactly
			   
;handle the end of the comparison
success_check_exactly: inc r0
failed_check:		   mov #0, r4
					   cmp r5, dict_len
					   bne next_dict_word
					   cmpb r0, max_score
					   bhi replace_max
after_max:			   cmp r3, string_len
					   blo next_prefix
					   halt
					   
;move r1 to point next dict word
next_dict_word: inc r1
				cmpb -1(r1), #'@
				bne next_dict_word
				inc r5
lp_rst_prefix:  cmp r3, #1
				beq first_prefix
				dec r2
				cmpb -1(r2), #'@  ; a bug will occuer if prefix is just @, shold be handled seperatly
				bne lp_rst_prefix
				br check_if_match
first_prefix:	mov strings, r2
br_check_if_match:br check_if_match

store_string: mov strings, max_string
			  br after_max

replace_max: movb r0, max_score
			 cmp r3, #1
			 beq store_string
r_max_loop:	 dec r2
			 cmpb -1(r2), #'@
			 bne r_max_loop
			 movb r2, max_string
		     br after_max

next_prefix: cmp r3, string_len
			 beq fin
nxt_prf_loop: inc r2
			  cmpb -1(r2), #'@
			  bne nxt_prf_loop
			  inc r3
			  mov #1, r5
			  mov dict, r1
			  mov #0, r0
			  br br_check_if_match
			  
end_word: inc r2
		  cmpb (r2), #'@
		  beq success_check_exactly
		  br failed_check
fin: halt
;----------------------------
string_len: .word 2
strings: .word str1
		 .word str2
str1: .ascii<atam@>
str2: .ascii<combi@>
.even
dict_len: .word 5
dict: .word term1
	  .word term2
	  .word term3
	  .word term4
	  .word term5
term1: .ascii <atam@>
term2: .ascii <azam@>
term3: .ascii <atmosphere@>
term4: .ascii <matam@>
term5: .ascii <combi@>
;----------------------------
max_score: .word 0
max_string: .word 0